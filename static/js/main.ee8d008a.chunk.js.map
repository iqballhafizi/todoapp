{"version":3,"sources":["Todo.js","AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","deleteTodo","todoList","length","map","task","react_default","a","createElement","className","key","id","onClick","content","AddForm","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","React","Component","App","todos","filter","Math","random","Object","toConsumableArray","concat","class","src_Todo","src_AddForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAuBeA,SArBF,SAAAC,GAAwB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,WAEdC,EAAWF,EAAKG,OACrBH,EAAKI,IAAI,SAAAC,GACR,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IAC1CL,EAAAC,EAAAC,cAAA,QAAMI,QAAW,WAAOX,EAAWI,EAAKM,MAAxC,IAAgDN,EAAKQ,YAKxDP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,4BAED,OACCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbP,KCkBWY,6MA/BdC,MAAQ,CAEPF,QAAS,MAGVG,aAAe,SAACC,GAEfC,EAAKC,SAAS,CACbN,QAASI,EAAEG,OAAOC,WAGpBC,aAAe,SAACL,GACfA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CAEbN,QAAS,8EAIV,OACEP,EAAAC,EAAAC,cAAA,QAAMkB,SAAWC,KAAKL,cACtBhB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOC,SAAUF,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMF,kBAzBhDiB,IAAMC,WCyCbC,6MApCdjB,MAAQ,CACHkB,MAAO,CACL,CAACtB,GAAI,EAAGE,QAAS,iBACjB,CAACF,GAAI,EAAGE,QAAS,wBAIvBZ,WAAa,SAACU,GACb,IAAMsB,EAAQf,EAAKH,MAAMkB,MAAMC,OAAO,SAAAlC,GACrC,OAAOA,EAAKW,KAAOA,IAGpBO,EAAKC,SAAS,CACXc,aAIJR,QAAU,SAACzB,GACTA,EAAKW,GAAKwB,KAAKC,SACf,IAAMH,EAAKI,OAAAC,EAAA,EAAAD,CAAOnB,EAAKH,MAAMkB,OAAlBM,OAAA,CAAyBvC,IACpCkB,EAAKC,SAAS,CACVc,mFAKJ,OACE3B,EAAAC,EAAAC,cAAA,OAAKgC,MAAM,aACXlC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,UACAH,EAAAC,EAAAC,cAACiC,EAAD,CAAMzC,KAAQ2B,KAAKZ,MAAMkB,MAAOhC,WAAc0B,KAAK1B,aACnDK,EAAAC,EAAAC,cAACkC,EAAD,CAASjB,QAAWE,KAAKF,kBAhCbM,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee8d008a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todo = ({todo, deleteTodo}) => {\r\n\r\n\tconst todoList = todo.length ? (\r\n\t\ttodo.map(task => {\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"collection-item\" key={task.id}>\r\n\t\t\t\t\t<span onClick = {() => {deleteTodo(task.id)}}> {task.content}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t})\r\n\t\t) : (\r\n\t\t<p className=\"center\"> You have no todos left </p>\r\n\t\t);\r\n\treturn(\r\n\t\t<div className=\"collection\">\r\n\t\t\t{todoList}\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\n\r\nclass AddForm extends React.Component{\r\n\r\n\tstate = {\r\n\r\n\t\tcontent: ''\r\n\t}\r\n\r\n\thandleChange = (e) =>{\r\n\r\n\t\tthis.setState({\r\n\t\t\tcontent: e.target.value\t\r\n\t\t});\r\n\t}\r\n\thandleSubmit = (e) =>{\r\n\t\te.preventDefault();\r\n\t\tthis.props.addTodo(this.state);\r\n\t\tthis.setState({\r\n\r\n\t\t\tcontent: ''\r\n\t\t});\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t\t<form onSubmit= {this.handleSubmit}>\r\n\t\t\t\t<label> Add todo </label>\r\n\t\t\t\t<input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n\t\t\t\t</form>\r\n\t\t\t);\r\n\r\n\t}\r\n\t\t\r\n}\r\n\r\nexport default AddForm;","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './Todo';\nimport AddForm from './AddForm';\n\nclass App extends Component {\n\n state = {\n      todos: [\n        {id: 1, content: \"buy some milk\"},\n        {id: 2, content: \"go to barbershop\"},\n      ],  \n  } \n\n  deleteTodo = (id) => {\n   const todos = this.state.todos.filter(todo =>{\n    return todo.id !== id;\n   });\n\n   this.setState({\n      todos\n   });\n  }\n\n  addTodo = (todo) =>{\n    todo.id = Math.random();\n    const todos = [...this.state.todos, todo];\n    this.setState({\n        todos\n    });\n  }\n\n  render() {\n    return (\n      <div class=\"container\">\n      <h1 className=\"center blue-text\"> Todo </h1>\n      <Todo todo = {this.state.todos} deleteTodo = {this.deleteTodo}/>\n      <AddForm addTodo = {this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}